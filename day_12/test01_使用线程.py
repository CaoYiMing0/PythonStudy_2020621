"""
Python虚拟机的访问由全局解释器锁（GIL）控制，这个锁能保证同一时刻只有一个线程运行。
在多线程环境中，Python虚拟机按一下方式执行：
    1)设置GIL
    2)切换到一个线程运行
    3)运行指定数量的字节码指令或线程主动让出控制(可以调用time.sleep(0))
    4)把线程设置到睡眠状态
    5)解锁GIL
    6)再次重复以上所有步骤
"""
"""
    当一个线程结束计算，它就退出了。线程可以调用_thread.exit()等退出函数，也可以使用Python退出进程
的标准方法（如sys.exit()或抛出一个SystemExit异常），不过不可以直接“杀掉”（kill）一个线程。
    不建议使用_thread模块。很明显的一个原因是，当主线程退出时，其他线程如果没有被清除就会退出。另一个模块
threading能确保所有“重要的”子线程都退出后，进程才会结束。
"""
"""
    Python提供了几个用于多线程编程的模块，包括_thread、threading和Queue等。_thread和threading模块允许
程序员创建和管理线程。_thread模块提供了基本线程和锁的支持，threading提供了更高级别、功能更强的线程管理功能。
Queue模块允许用户创建一个可以用于多个线程之间共享数据的队列数据结构。
    避免使用_thread模块，原因有三点。首先，更高级别的threading模块更为先进，对线程的支持更为完善，而且使用
_thread模块的同步原语很少（实际上只有一个），而threading模块有很多；再者，_thread模块中在主线程结束时，所有
线程都会被强制结束，没有警告也不会有正常清除工作，至少threading模块能确保重要子线程退出后进程才退出。
"""