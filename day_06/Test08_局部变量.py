# 在函数内部定义的变量名只能被函数内部引用，不能在函数外引用，这个变量的作用域是局部的，也称为局部变量。
def func1():
    x = 100
    print('变量x的值为：', x)
    return


func1()  # 变量x的值为： 100
# 函数外访问函数内部的局部变量 会怎样呢？
# print(x)  # NameError: name 'x' is not defined


# 如果在函数外定义了变量x并赋值，将x作为函数的实参，在函数体中更改x的值，函数外会跟着变更吗?
y = 100


def func2(y):
    print('y=', y)
    y = 2
    print('局部变量y变为', y)
    return


func2(y)
print('y一直是', y)
"""
y= 100
局部变量y变为 2
y一直是 100
"""
"""
由输出结果看到，在函数体中更改变量的值并不会更改函数体外变量的值。这是因为调用func
函数时创建了新的命名空间，它作用于func函数的代码块。赋值语句x=2只在函数体的作用域
内起作用，不能影响外部作用域中的x。可以看到，函数外部调用x时，它的值并没有改变。
"""
