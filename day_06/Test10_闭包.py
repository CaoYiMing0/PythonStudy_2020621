"""
我们可以将闭包理解为一种特殊的函数，这种函数由两个函数的嵌套组成，且称之为外函数和内函数，
外函数返回值是内函数的引用，此时就构成了闭包。

闭包的格式:
def 外层函数(参数):
    def 内层函数():
        print("内层函数执行", 参数)
    return 内层函数
内层函数的引用 = 外层函数("传入参数")
内层函数的引用()

外层函数中的参数，不一定要有，据情况而定，但是一般情况下都会有并在内函数中使用到

"""


def func(a, b):
    def line(x):
        return a * x - b

    return line


line = func(2, 3)
print(line(5))  # 7
print(line(7))  # 11
"""
在这个案例中，外函数func有接收参数 a=2，b=3，内函数line接收参数x=5，
在内函数体中计算了a*x-b 即 2×5-3的值作为返回值，外函数返回内函数的引用，
这里的引用指的是内函数line在内存中的起始地址，最终调用内函数line()得到返回值7
"""

# 内函数中修改外函数的值
"""
一般在函数结束时，会释放临时变量，但在闭包中，由于外函数的临时变量在内函数中用到，
此时外函数会把临时变量与内函数绑定到一起，这样虽然外函数结束了，
但调用内函数时依旧能够使用临时变量，即闭包外层的参数可以在内存中进行保留。
如果想要在内函数中修改外函数的值，需要使用 nonlocal 关键字声明变量
"""


def func(a, b):
    def line(x):
        nonlocal a
        a = 3
        return a * x - b

    return line


line = func(2, 3)
print(line(5))  # 12

# Python中，闭包的主要用途就是用于装饰器的实现
